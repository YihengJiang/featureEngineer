#!/usr/bin/env python
# -*- coding:utf-8 -*-
import os

os.environ["SIDEKIT"] = "theano=false,theano_config=cpu,libsvm=false,mpi=false"
import numpy as np
import sidekit
import sys
import re
import random
import pandas as pd
import jyh.Utils as ut
import pickle as pk
import copy
import globalVar as glb

root = glb.get_root()
dropNoSpkIdData = False  # there has some data who has no spkid,this flag is used to whether use these data.
idmapDir = root + "fea/idmap/"


class IdMapConstructor():
    @staticmethod
    def keyConstructorCustom():  # if reGenerateKey==True,we will load trial_key from default file,this file is generated by last time.
        idmap10 = IdMapConstructor.readSreIdmap(10, True)
        male, female = IdMapConstructor.idMap2DataFrame(idmap10[0], True), IdMapConstructor.idMap2DataFrame(
            idmap10[1], True)
        data = male.append(female)
        enroll = []
        test = []
        teI = []
        enIt = 0
        teIt = 0
        for i in data.groupby('id'):
            n = i[1].shape[0]
            if n > 1:
                en = np.random.randint(n)
                ind = [True] * n
                ind[en] = False
                enroll.append(list(i[1].iloc[en]))
                tmp = i[1][ind]
                if n == 2:
                    test.append(list(tmp.iloc[0]))
                    teI.append([enIt, teIt])
                    teIt += 1
                elif n == 3:
                    test += [list(tmp.iloc[0]), list(tmp.iloc[1])]
                    teI.append([enIt, teIt])
                    teIt += 1
                    teI.append([enIt, teIt])
                    teIt += 1
                elif n > 3:
                    en = np.random.randint(n - 1)
                    test.append(list(tmp.iloc[en]))
                    ind = [True] * (n - 1)
                    ind[en] = False
                    tmp = tmp[ind]
                    en = np.random.randint(n - 2)
                    test.append(list(tmp.iloc[en]))
                    teI.append([enIt, teIt])
                    teIt += 1
                    teI.append([enIt, teIt])
                    teIt += 1
                enIt += 1

        trial = np.zeros([enIt, teIt]).astype(bool)
        nontrial = np.ones([enIt, teIt]).astype(bool)
        for i, j in teI:
            trial[i, j] = True
            nontrial[i, j] = False
        test = np.array(test)
        enroll = np.array(enroll)
        key = sidekit.Key()
        key.segid = test[:, 0]
        key.modelid = enroll[:, 0]
        key.modelset = enroll[:, 1]
        key.segset = test[:, 1]
        key.tar = trial
        key.non = nontrial
        return key

    @staticmethod
    def tesTableConstructorCustom():
        '''
        this method will also generate deep learning data
        :return:
        '''
        idmapAll = IdMapConstructor.readAllSreIdmap()
        trial_key = IdMapConstructor.keyConstructorCustom()
        # sre10
        enroll_idmap = sidekit.IdMap()
        enroll_idmap.leftids = trial_key.modelid
        enroll_idmap.rightids = np.array(['sre10/' + i[:-7] + i[-3:] for i in list(trial_key.modelset)])
        enroll_idmap.start = np.empty(np.size(enroll_idmap.leftids), '|O')
        enroll_idmap.stop = np.empty(np.size(enroll_idmap.leftids), '|O')
        test_idmap = sidekit.IdMap()
        test_idmap.leftids = trial_key.segid
        test_idmap.rightids = np.array(['sre10/' + i[:-7] + i[-3:] for i in list(trial_key.segset)])
        test_idmap.start = np.empty(np.size(test_idmap.leftids), '|O')
        test_idmap.stop = np.empty(np.size(test_idmap.leftids), '|O')
        test_ndx = IdMapConstructor.key2ndx_SelectSomeTrialToDo(trial_key)

        ubm_TV_idmap = sidekit.IdMap()
        plda_idmap = sidekit.IdMap()
        dl_valid_idmap = sidekit.IdMap()
        dl_train_idmap = sidekit.IdMap()
        s568l, s568r, swbl, swbr, s4l, s4r = [], [], [], [], [], []
        for i, j in idmapAll.items():
            if i == '10':
                continue
            elif i == '4':
                s4l += list(j[0].leftids) + list(j[1].leftids) + list(j[2].leftids) + list(j[3].leftids)
                s4r += ['sre0' + i + '/' + k[:-6] + k[-2:] for k in
                        list(j[0].rightids) + list(j[1].rightids) + list(j[2].rightids) + list(j[3].rightids)]
            elif len(j) == 4:
                s568l += list(j[0].leftids) + list(j[1].leftids) + list(j[2].leftids) + list(j[3].leftids)
                s568r += ['sre0' + i + '/' + k[:-6] + k[-2:] for k in
                       list(j[0].rightids) + list(j[1].rightids) + list(j[2].rightids) + list(j[3].rightids)]
            else:
                swbl += list(j[0].leftids) + list(j[1].leftids)
                swbr += [i + '/' + k[:-6] + k[-2:] for k in list(j[0].rightids) + list(j[1].rightids)]
        # all data except sre10
        ubm_TV_idmap.leftids = np.array(s4l + s568l + swbl)
        ubm_TV_idmap.rightids = np.array(s4r + s568r + swbr)
        ubm_TV_idmap.start = np.empty(np.size(ubm_TV_idmap.leftids), '|O')
        ubm_TV_idmap.stop = np.empty(np.size(ubm_TV_idmap.leftids), '|O')
        # sre04-sre08
        plda_idmap.leftids = np.array(s4l + s568l)
        plda_idmap.rightids = np.array(s4r + s568r)
        plda_idmap.start = np.empty(np.size(plda_idmap.leftids), '|O')
        plda_idmap.stop = np.empty(np.size(plda_idmap.leftids), '|O')
        # sre04
        dl_valid_idmap.leftids = np.array(s4l)
        dl_valid_idmap.rightids = np.array(s4r)
        dl_valid_idmap.start = np.empty(np.size(dl_valid_idmap.leftids), '|O')
        dl_valid_idmap.stop = np.empty(np.size(dl_valid_idmap.leftids), '|O')
        # sre05-sre08 and SwitchBoard
        dl_train_idmap.leftids = np.array(s568l + swbl)
        dl_train_idmap.rightids = np.array(s568r + swbr)
        dl_train_idmap.start = np.empty(np.size(dl_train_idmap.leftids), '|O')
        dl_train_idmap.stop = np.empty(np.size(dl_train_idmap.leftids), '|O')

        trial_key.write(root + "fea/trial_key_custom.h5")
        test_ndx.write(root + "fea/test_ndx_custom.h5")
        enroll_idmap.write(root + "fea/enroll_idmap_custom.h5")
        test_idmap.write(root + "fea/test_idmap_custom.h5")

        ubm_TV_idmap.write(root + "fea/ubm_TV_idmap.h5")
        plda_idmap.write(root + "fea/plda_idmap.h5")
        dl_valid_idmap.write(root + "fea/dl_valid_idmap.h5")
        dl_train_idmap.write(root + "fea/dl_train_idmap.h5")

    @staticmethod
    def tesTableConstructor10s():
        # not:test's modelid is wrong
        v1D = root + "sre10/train_key/10sec.trn"
        v1 = pd.read_csv(v1D, delimiter='\s*', header=None, engine='python').as_matrix()
        enroll = sidekit.IdMap()
        enroll.leftids = np.array(["1" + str(i) for i in list(v1[:, 0])])
        enroll.rightids = np.array([i[:-6] + "T" + i[-1] + "1" for i in list(v1[:, 2])])
        enroll.start = np.empty(np.size(enroll.leftids), '|O')
        enroll.stop = np.empty(np.size(enroll.leftids), '|O')

        v2D = root + "sre10/test_key/10sec-10sec.trialkey.csv"
        v2 = pd.read_csv(v2D, delimiter=',', engine='python')[['modelid', 'testid', 'channel', 'targettype']]
        v3D = root + "sre10/test_key/10sec-10sec.ndx"
        v3 = pd.read_csv(v3D, delimiter=':|/|\.|\s*', header=None, engine='python')
        v3.columns = ['0', '1', '2', '3', '4', '5', '6']
        v2.loc[v2['channel'] == 'a', 'channel'] = 'A'
        v2.loc[v2['channel'] == 'b', 'channel'] = 'B'
        v3 = v3[['0', '2', '3', '4', '6']]
        su = pd.merge(v2, v3, how='inner', left_on=['modelid', 'testid', 'channel'], right_on=['0', '4', '6'])
        su = su[['targettype', '0', '2', '3', '4', '6']]
        testD = list(su[['2', '3', '4', '6']].drop_duplicates().as_matrix())
        testD = np.array([str(i[0]) + "/" + str(i[1]) + "/" + str(i[2]) + "T" + str(i[3]) + "1" for i in testD])
        test = sidekit.IdMap()
        test.leftids = np.ones(np.size(testD))
        test.rightids = testD
        test.start = np.empty(np.size(test.leftids), '|O')
        test.stop = np.empty(np.size(test.leftids), '|O')

        tmp = IdMapConstructor.idMap2DataFrame(enroll, False)
        tmp = tmp[['id', 'fi']]
        su = pd.DataFrame([[i[0], "1" + str(i[1]), i[2], i[3], i[4], i[5]] for i in su.as_matrix()])
        su.columns = ['0', '1', '2', '3', '4', '5']
        tmp = pd.merge(su, tmp, how='inner', left_on='1', right_on='id')
        tmp = tmp[['0', '2', '3', '4', '5', 'id']]

        ndx = sidekit.Ndx()
        ndx.modelset = tmp['id'].drop_duplicates().as_matrix()
        modelset = list(ndx.modelset)
        segset = [str(i[0]) + "/" + str(i[1]) + "/" + str(i[2]) + "T" + str(i[3]) + "1" for i in
                  list(tmp[['2', '3', '4', '5']].drop_duplicates().as_matrix())]
        ndx.segset = np.array(segset)
        trialmask = pd.DataFrame(np.zeros((ndx.modelset.shape[0], ndx.segset.shape[0]), dtype=bool))
        tmp = [[i[0], str(i[1]) + "/" + str(i[2]) + "/" + str(i[3]) + "T" + str(i[4]) + "1", i[5]] for i in
               list(tmp.as_matrix())]
        trialmask.columns = [segset]
        trialmask.index = [modelset]
        tar = copy.deepcopy(trialmask)

        key = sidekit.Key()
        key.modelset = ndx.modelset
        key.segset = ndx.segset

        for j, i in enumerate(tmp):
            if i[0] == 'target':
                tar.loc[i[2], i[1]] = True
            trialmask.loc[i[2], i[1]] = True
        ndx.trialmask = trialmask.as_matrix()
        key.tar = tar.as_matrix()
        key.non = ~(tar.as_matrix())

        # there is wrong in test and enroll rightid,so i revise it:
        enroll.rightids = np.array(["sre10/" + i for i in list(enroll.rightids)])
        test.rightids = np.array(["sre10/" + i for i in list(test.rightids)])
        ###########################################################################
        # ndx.modelset=np.array(["sre10/"+i for i in list(ndx.modelset)])
        ndx.segset = np.array(["sre10/" + i for i in list(ndx.segset)])
        # key.modelset = np.array(["sre10/" + i for i in list(key.modelset)])
        key.segset = np.array(["sre10/" + i for i in list(key.segset)])
        ###########################################################################
        enroll.write(root + "fea/enroll_idmap_10s.h5")
        test.write(root + "fea/test_idmap_10s.h5")
        ndx.write(root + "fea/test_ndx_10s.h5")
        key.write(root + "fea/trial_key_10s.h5")

    @staticmethod
    def key2ndx_SelectSomeTrialToDo(key,
                                    nontargetNum=False):  # nontarget number of each enroll model,if None,it will make all trials.
        if not key:
            key = IdMapConstructor.keyConstructorCustom()
        ndx = key.to_ndx()
        if nontargetNum:
            ndx.trialmask = key.tar
            li = list(range(len(key.non[0])))
            for j, i in enumerate(key.non):
                ind = random.sample(list(np.array(li)[i]), nontargetNum)
                ndx.trialmask[j, ind] = True
        return ndx
        # for i in ndx.trialmask:
        #     for j in i:
        #         if j:

    @staticmethod
    def idmapConstructor04_trn(dir, model2spkValue):

        modelIdMap = model2spkValue[:, 0]

        value = pd.read_csv(root + dir, delimiter=',|\s*',
                            header=None, engine='python').as_matrix()
        removeId = []
        modelId = value[:, 0]
        for j, i in enumerate(modelId):
            tmp = np.argwhere(modelIdMap == int(i))
            if tmp.size:
                value[j, 0] = model2spkValue[tmp[0][0], 1]
            else:  # have no true spk id
                removeId.append(j)
        value = np.delete(value, removeId, axis=0)

        idmap = sidekit.IdMap()  # modelId  segmentId start  end
        column = value.shape[1]
        modelId = np.asarray(list(map(lambda x: '4' + str(x), value[:, 0])))
        idmap.leftids = modelId.astype(int).repeat(column - 1)
        idmap.rightids = np.asarray([i + "TA" for i in value[:, 1:].reshape(np.size(value[:, 1:]))])
        idmap.start = np.empty(np.size(idmap.leftids), '|O')
        idmap.stop = np.empty(np.size(idmap.leftids), '|O')
        return idmap

    @staticmethod
    def idmapConstructor04_tst(dir, model2spkValue):

        modelNameMap = model2spkValue[:, 0]

        value = pd.read_csv(root + dir, delimiter=',|\s*',
                            header=None, engine='python').as_matrix()
        value = pd.DataFrame(value)
        value = value.drop_duplicates(2).as_matrix()
        modelName = value[:, 2]
        removeId = []
        for j, i in enumerate(modelName):
            tmp = np.argwhere(modelNameMap == i)
            if tmp.size:
                value[j, 0] = model2spkValue[tmp[0][0], 1]
                value[j, 1] = model2spkValue[tmp[0][0], 2]
            else:
                removeId.append(j)
        value = np.delete(value, removeId, axis=0)

        modelId = np.asarray(list(map(lambda x: '4' + str(x), value[:, 0])))
        name = np.asarray(list(map(lambda x: x + ".sphTA", value[:, 2])))
        ima = np.argwhere(value[:, 1] == 'M')
        ife = np.argwhere(value[:, 1] == 'F')
        idmap_m, idmap_f = sidekit.IdMap(), sidekit.IdMap()  # modelId  segmentId start  end

        idmap_m.leftids, idmap_f.leftids = modelId[ima].astype(int), modelId[ife].astype(int)
        idmap_m.rightids, idmap_f.rightids = name[ima], name[ife]
        idmap_m.start, idmap_f.start = np.empty(len(ima), '|O'), np.empty(len(ife), '|O')
        idmap_m.stop, idmap_f.stop = np.empty(len(ima), '|O'), np.empty(len(ife), '|O')
        return idmap_m, idmap_f

    @staticmethod
    def idmapConstructor05_trn(dir, model2spkValue):

        modelIdMap = model2spkValue[:, 0]

        value = pd.read_csv(root + dir, delimiter=',|\s*',
                            header=None, engine='python').as_matrix()
        removeId = np.array([])
        column = value.shape[1]
        for i in range(1, column):
            tmp = np.argwhere(value[:, i] == None)
            if tmp.size:
                if tmp.size == 1:
                    removeId = np.concatenate([removeId, tmp[0]])
                else:
                    removeId = np.concatenate([removeId, list(tmp.squeeze())])
        if len(removeId):
            removeId = list(set(removeId.astype(int)))
            value = np.delete(value, removeId, axis=0)
        removeId = []
        modelId = value[:, 0]
        for j, i in enumerate(modelId):
            tmp = np.argwhere(modelIdMap == int(i[1:]))
            if tmp.size:
                value[j, 0] = model2spkValue[tmp[0][0], 1]
            else:  # have no true spk id
                removeId.append(j)
        value = np.delete(value, removeId, axis=0)
        idmap = sidekit.IdMap()  # modelId  segmentId start  end

        modelId = np.asarray(list(map(lambda x: '5' + str(x), value[:, 0])))
        idmap.leftids = modelId.astype(int).repeat(column - 1)
        right = value[:, 1:].reshape(np.size(value[:, 1:]))
        idmap.rightids = np.asarray([i[:-2] + 'T' + i[-1] for i in right])
        idmap.start = np.empty(np.size(idmap.leftids), '|O')
        idmap.stop = np.empty(np.size(idmap.leftids), '|O')
        return idmap

    @staticmethod
    def idmapConstructor05_tst(dir, model2spkValue):
        tom = re.findall("(.{2})\.ndx", dir)[0]  # 4w or ic
        tom = "T" if tom == "4w" else "M"
        modelNameMap = np.asarray([i + '.sph' + j for i, j in zip(model2spkValue[:, 0], model2spkValue[:, 1])])
        value = pd.read_csv(root + dir, delimiter=',|\s*',
                            header=None, engine='python')

        value = value.drop_duplicates([2, 3]).as_matrix()
        name = np.asarray([i + '.sph' + j for i, j in zip(value[:, 2], value[:, 3])])
        removeId = []
        for j, i in enumerate(name):
            tmp = np.argwhere(modelNameMap == i)
            if tmp.size:
                value[j, 0] = model2spkValue[tmp[0][0], 2]
                value[j, 1] = model2spkValue[tmp[0][0], 3]
            else:
                removeId.append(j)
        value = np.delete(value, removeId, axis=0)

        modelId = np.asarray(list(map(lambda x: '5' + str(x), value[:, 0])))
        name = np.asarray(list(map(lambda x: x[0] + ".sph" + tom + x[1], zip(value[:, 2], value[:, 3]))))
        ima = np.argwhere(value[:, 1] == 'f')
        ife = np.argwhere(value[:, 1] == 'm')
        idmap_m, idmap_f = sidekit.IdMap(), sidekit.IdMap()  # modelId  segmentId start  end
        idmap_m.leftids, idmap_f.leftids = modelId[ima].astype(int), modelId[ife].astype(int)
        idmap_m.rightids, idmap_f.rightids = name[ima], name[ife]
        idmap_m.start, idmap_f.start = np.empty(len(ima), '|O'), np.empty(len(ife), '|O')
        idmap_m.stop, idmap_f.stop = np.empty(len(ima), '|O'), np.empty(len(ife), '|O')
        return idmap_m, idmap_f

    @staticmethod
    def idmapConstructor06_trn(dir, model2spkValue):  # 1f 1m 3f 3m 8f 8m
        gender, column = dir[1], dir[0]

        model2spkValue = model2spkValue[
            (model2spkValue[1] == (column + 'conv4w')) & (model2spkValue[3] == gender) & (model2spkValue[2] != '-')]
        co = list(range(5, 5 + int(column)))
        co.insert(0, 2)
        value = np.asarray(model2spkValue[co])

        idmap = sidekit.IdMap()  # modelId  segmentId start  end
        modelId = np.asarray(list(map(lambda x: '6' + str(x), value[:, 0])))
        idmap.leftids = modelId.astype(int).repeat(int(column))
        idmap.rightids = np.asarray([i[:-2] + "T" + i[-1].upper() for i in value[:, 1:].reshape(np.size(value[:, 1:]))])
        idmap.start = np.empty(np.size(idmap.leftids), '|O')
        idmap.stop = np.empty(np.size(idmap.leftids), '|O')
        return idmap

    @staticmethod
    def idmapConstructor06_tst(dir, model2spkValue):
        gender, column = dir[1], dir[0]
        model2spkValue = model2spkValue[
            (model2spkValue[1].isin([column + 'conv4w', column + 'convmic'])) & (model2spkValue[5] == gender)]
        value = np.asarray(model2spkValue[[0, 1, 4, 6]])  # name 1conv4w spkid channel

        idmap = sidekit.IdMap()  # modelId  segmentId start  end
        modelId = np.asarray(list(map(lambda x: '6' + str(x), value[:, 2])))
        idmap.leftids = modelId.astype(int)
        idmap.rightids = np.asarray(
            [i + ".sph" + ("T" if value[j, 1][-2:] == "4w" else "M") + value[j, 3].upper() for j, i in
             enumerate(value[:, 0])])
        idmap.start = np.empty(np.size(idmap.leftids), '|O')
        idmap.stop = np.empty(np.size(idmap.leftids), '|O')
        return idmap

    @staticmethod
    def idmapConstructor08_trn(dir):
        coIndInit = ['sex', 'segment_id:channel', 'speaker_id', 'channel_type']
        coInd, column = [], 0
        if dir == '3conv':
            column = 3
            coInd = coIndInit[:2] + ['segment_id:channel.1', 'segment_id:channel.2'] + coIndInit[2:]
        elif dir == '8conv':
            column = 8
            coInd = coIndInit[:2] + ['segment_id:channel.1', 'segment_id:channel.2', 'segment_id:channel.3',
                                     'segment_id:channel.4', 'segment_id:channel.5', 'segment_id:channel.6',
                                     'segment_id:channel.7'] + coIndInit[2:]
        elif dir == 'short2':
            column = 1
            coInd = coIndInit
        elif dir == 'long':
            column = 1  # singal channel
            coInd = coIndInit

        model2spkDir = root + "sre08/train_key/NIST_SRE08_" + dir + ".model.trial_key"
        model2spkValue = pd.read_csv(model2spkDir, delimiter=',|\s*', engine='python')  # .as_matrix()[:, :2]
        model2spkValue = model2spkValue[coInd]
        modelF, modelM = model2spkValue[model2spkValue['sex'] == 'f'].as_matrix(), model2spkValue[
            model2spkValue['sex'] == 'm'].as_matrix()

        modelId_f = np.asarray(list(map(lambda x: '8' + str(x), modelF[:, -2])))
        modelId_m = np.asarray(list(map(lambda x: '8' + str(x), modelM[:, -2])))
        renameM, renameF = modelM[:, 1:-2] + modelM[:, -1:], modelF[:, 1:-2] + modelF[:, -1:]

        right_m, right_f = renameM.reshape(np.size(renameM)), renameF.reshape(np.size(renameF))
        right_m = np.array([i[:5] + ".sph" + ("T" if i[7:10] == "phn" else "M") + i[6].upper() for i in right_m])
        right_f = np.array([i[:5] + ".sph" + ("T" if i[7:10] == "phn" else "M") + i[6].upper() for i in right_f])

        idmap_m, idmap_f = sidekit.IdMap(), sidekit.IdMap()  # modelId  segmentId start  end
        idmap_m.leftids, idmap_f.leftids = modelId_m.astype(int).repeat(column), modelId_f.astype(int).repeat(column)
        idmap_m.rightids, idmap_f.rightids = right_m, right_f
        idmap_m.start, idmap_f.start = np.empty(np.size(idmap_m.leftids), '|O'), np.empty(np.size(idmap_f.leftids),
                                                                                          '|O')
        idmap_m.stop, idmap_f.stop = np.empty(np.size(idmap_m.leftids), '|O'), np.empty(np.size(idmap_f.leftids), '|O')
        return idmap_m, idmap_f

    @staticmethod
    def idmapConstructor08_tst(dir, model2spkValue, tmpS):

        value = pd.read_csv(root + "sre08/test_key/" + dir + ".ndx", delimiter=',|\s*',
                            header=None, engine='python')
        value = value.drop_duplicates(2)[[1, 2]]
        value.columns = ['sex', 'name']
        tmpS = pd.DataFrame([[i[2], i[0] + ".sph:" + i[1].upper()] for i in tmpS.as_matrix()])
        tmpS.columns = ['sex', 'name']
        value = pd.merge(tmpS, value, how='inner', on='name', copy=False)
        value = value.as_matrix()[:, :2]
        modelNameMap = np.asarray([i[:5] for i in value[:, 1]])
        name = model2spkValue[:, 0]
        removeId = []
        for j, i in enumerate(name):
            tmp = np.argwhere(modelNameMap == i)
            if tmp.size:
                model2spkValue[j, 0] = value[tmp[0][0], 1]
                model2spkValue[j, 0] = re.sub(":", ("M" if model2spkValue[j, 2][:3] == "mic" else "T"),
                                              model2spkValue[j, 0])
                model2spkValue[j, 2] = value[tmp[0][0], 0]
            else:
                removeId.append(j)
        value = np.delete(model2spkValue, removeId, axis=0)

        modelId = np.asarray(list(map(lambda x: '8' + str(x), value[:, 1])))
        name = value[:, 0]
        ima = np.argwhere(value[:, 2] == 'm')
        ife = np.argwhere(value[:, 2] == 'f')

        idmap_m, idmap_f = sidekit.IdMap(), sidekit.IdMap()  # modelId  segmentId start  end
        idmap_m.leftids, idmap_f.leftids = modelId[ima].astype(int), modelId[ife].astype(int)
        idmap_m.rightids, idmap_f.rightids = name[ima], name[ife]
        idmap_m.start, idmap_f.start = np.empty(len(ima), '|O'), np.empty(len(ife), '|O')
        idmap_m.stop, idmap_f.stop = np.empty(len(ima), '|O'), np.empty(len(ife), '|O')
        return idmap_m, idmap_f

    @staticmethod
    def idmapConstructor10_trn(dir, model2spkDir):
        model2spkDir = dict(map(lambda x, y: [x, y], model2spkDir[:, 0], model2spkDir[:, 1]))

        coIndInit = ['8conv', '10sec', 'core']
        if dir == coIndInit[0]:
            column = 8
        else:
            column = 1

        v1D = root + "sre10/train_key/" + dir + ".trn"
        v2D = root + "sre10/other/" + dir + ".modelkey.csv"
        v1 = pd.read_csv(v1D, delimiter=',|\s*', header=None, engine='python').as_matrix()
        v1 = np.insert(v1, 1, np.zeros(v1.shape[0]), axis=1)
        v2 = pd.read_csv(v2D, delimiter=',|\s*', engine='python')
        if dropNoSpkIdData:
            v2 = v2[v2['speakerid'] != 'NOT_SCORED'].as_matrix()
        else:
            v2 = v2.as_matrix()
        modelId = v1[:, 0]
        modelIdMap = v2[:, 0]
        removeId = []
        for j, i in enumerate(modelId):
            tmp = np.argwhere(modelIdMap == i)
            if tmp.size:
                v1[j, 1] = v2[tmp[0][0], 1]
            else:
                removeId.append(j)
        v1 = np.delete(v1, removeId, axis=0)
        modelF, modelM = v1[v1[:, 2] == 'f'], v1[v1[:, 2] == 'm']
        modelId_f = np.asarray(list(map(lambda x: '1' + str(x[1]) + " " + str(x[0]), modelF[:, [0, 1]])))
        modelId_m = np.asarray(list(map(lambda x: '1' + str(x[1]) + " " + str(x[0]), modelM[:, [0, 1]])))

        idmap_m, idmap_f = sidekit.IdMap(), sidekit.IdMap()
        right_m, right_f = modelM[:, 3:].reshape(np.size(modelM[:, 3:])), modelF[:, 3:].reshape(np.size(modelF[:, 3:]))
        idmap_m.rightids = np.asarray(
            [i[:-2] + ('T' if i[-11] in ['l', 't'] else 'M') + i[-1] + model2spkDir[i[-11:-6]][0] for i in right_m])
        idmap_f.rightids = np.asarray(
            [i[:-2] + ('T' if i[-11] in ['l', 't'] else 'M') + i[-1] + model2spkDir[i[-11:-6]][0] for i in right_f])

        idmap_m.leftids, idmap_f.leftids = modelId_m.astype(str).repeat(column), modelId_f.astype(str).repeat(column)
        idmap_m.start, idmap_f.start = np.empty(np.size(idmap_m.leftids), '|O'), np.empty(np.size(idmap_f.leftids),
                                                                                          '|O')
        idmap_m.stop, idmap_f.stop = np.empty(np.size(idmap_m.leftids), '|O'), np.empty(np.size(idmap_f.leftids), '|O')
        return idmap_m, idmap_f

    @staticmethod
    def idmapConstructor10_tst(model2spkDir, duration):
        duration = dict(map(lambda x, y: [x, y], duration[:, 0], duration[:, 1]))
        tmp = []
        for dir in ['8conv', '10sec', 'core', 'coreext']:
            v2D = root + "sre10/other/" + dir + ".modelkey.csv"
            v2 = pd.read_csv(v2D, delimiter=',|\s*', engine='python')
            if dropNoSpkIdData:
                v2 = v2[v2['speakerid'] != 'NOT_SCORED']
            tmp.append(v2)
        tmp = pd.concat(tmp).drop_duplicates()
        data = pd.merge(tmp, model2spkDir, how='right', on='modelid', copy=False).as_matrix()

        # spkKD = root + "sre10/test_key/speakerkey.csv"
        # spkKey = pd.read_csv(spkKD, delimiter=',', engine='python')[['speakerid','sex']].drop_duplicates().astype(str)
        # data=pd.merge(data,spkKey,how='inner',on='speakerid',copy=False).as_matrix()
        # data=np.concatenate([data[:,:2],data[:,7:],data[:,3:7]],axis=1)

        modelF, modelM = data[data[:, 2] == 'f'], data[data[:, 2] == 'm']

        idmap_m, idmap_f = sidekit.IdMap(), sidekit.IdMap()
        idmap_f.leftids = np.asarray(list(map(lambda x: '1' + str(x[1]) + " " + str(x[0]), modelF[:, [0, 1]]))).astype(
            str)
        idmap_m.leftids = np.asarray(list(map(lambda x: '1' + str(x[1]) + " " + str(x[0]), modelM[:, [0, 1]]))).astype(
            str)

        idmap_m.rightids = np.asarray([i[3] + '/' + str(i[4]) + '/' + i[5] + '.sph' + (
            'T' if i[5][0] in ['l', 't'] else 'M') + i[6] + duration[i[5]][0] for i in modelM])
        idmap_f.rightids = np.asarray([i[3] + '/' + str(i[4]) + '/' + i[5] + '.sph' + (
            'T' if i[5][0] in ['l', 't'] else 'M') + i[6] + duration[i[5]][0] for i in modelF])

        idmap_m.start, idmap_f.start = np.empty(np.size(idmap_m.leftids), '|O'), np.empty(np.size(idmap_f.leftids),
                                                                                          '|O')
        idmap_m.stop, idmap_f.stop = np.empty(np.size(idmap_m.leftids), '|O'), np.empty(np.size(idmap_f.leftids), '|O')
        return idmap_m, idmap_f

    @staticmethod
    def idmapConstructor_swb_cellular(dir):
        v1D = root + "swb/LDC" + dir + "/SWB_AUDIT.TBL"
        v2D = root + "swb/LDC" + dir + "/SWB_CALLSTATS.TBL"
        v1 = pd.read_csv(v1D, delimiter=',', header=None, engine='python')[[0, 1, 2]]
        v2 = pd.read_csv(v2D, delimiter=',', header=None, engine='python')[[0, 1, 2, 3, 4]].as_matrix()
        s1 = np.concatenate([v2[:, 0], v2[:, 0]])
        s2 = np.concatenate([v2[:, 1], v2[:, 2]])
        s3 = np.concatenate([v2[:, 3], v2[:, 4]])
        v2 = pd.DataFrame(np.concatenate([s1[:, np.newaxis], s2[:, np.newaxis], s3[:, np.newaxis]], axis=1))
        v1.columns = ['0', '1', '2']
        v2.columns = ['0', '1', '2']
        data = pd.merge(v1, v2, how='inner', on=['0', '1'], copy=False).as_matrix()
        modelF, modelM = data[data[:, 3] == 'F'], data[data[:, 3] == 'M']
        idmap_m, idmap_f = sidekit.IdMap(), sidekit.IdMap()
        idmap_f.leftids = np.asarray(list(map(lambda x: '2' + str(x), modelF[:, 1])))
        idmap_m.leftids = np.asarray(list(map(lambda x: '2' + str(x), modelM[:, 1])))

        idmap_f.rightids = np.asarray(list(map(lambda x: 'SW_' + str(x[0]) + '.SPHT' + x[1], modelF[:, [0, 2]])))
        idmap_m.rightids = np.asarray(list(map(lambda x: 'SW_' + str(x[0]) + '.SPHT' + x[1], modelM[:, [0, 2]])))

        idmap_m.start, idmap_f.start = np.empty(np.size(idmap_m.leftids), '|O'), np.empty(np.size(idmap_f.leftids),
                                                                                          '|O')
        idmap_m.stop, idmap_f.stop = np.empty(np.size(idmap_m.leftids), '|O'), np.empty(np.size(idmap_f.leftids), '|O')
        return idmap_m, idmap_f

    @staticmethod
    def idmapConstructor_swb_phase(dir):
        index = ['98S75', '99S79', '2002S06']
        v1D = root + "swb/LDC" + dir + "/CALLINFO.TBL"
        v2D = root + "swb/LDC" + dir + "/CALLSTAT.TBL"
        v3D = root + "swb/LDC" + dir + "/SPKRINFO.TBL"
        v1 = pd.read_csv(v1D, delimiter=',', header=None, engine='python')[[0, 2, 3]]
        v2 = pd.read_csv(v2D, delimiter=',', header=None, engine='python')

        if index[0] == dir:
            v2 = v2[[2, 3, 5, 6]].as_matrix()
            v3 = None  # sex is right,neednt revise sex info
        elif index[1] == dir:
            v2 = v2[[2, 3, 4, 5]].as_matrix()
            v3 = pd.read_csv(v3D, delimiter=',|"', header=None, engine='python')[[0, 1]]
            v3.columns = ['0', '1']
        else:
            v2 = v2[[3, 4, 5, 6]].as_matrix()
            v3 = pd.read_csv(v3D, delimiter=',|"', header=None, engine='python')[[0, 1]]
            v3.columns = ['0', '1']
        s1 = np.concatenate([v2[:, 0], v2[:, 1]])
        s2 = np.concatenate([v2[:, 2], v2[:, 3]])
        v2 = pd.DataFrame(np.concatenate([s1[:, np.newaxis], s2[:, np.newaxis]], axis=1)).drop_duplicates()
        v1.columns = ['0', '1', '2']
        v2.columns = ['0', '1']
        data = pd.merge(v1, v2, how='inner', left_on='1', right_on='0', copy=False)
        data.columns = ['0', '1', '2', '3', '4']
        data = data[['0', '1', '2', '4']]
        if v3 is not None:
            data = pd.merge(data, v3, how='left', left_on='1', right_on='0', copy=False)
            data.columns = ['0', '1', '2', '3', '4', '5']
            data = data[['0', '1', '2', '5']]
        data = data.drop_duplicates().as_matrix()
        modelF, modelM = data[data[:, 3] == 'F'], data[data[:, 3] == 'M']
        idmap_m, idmap_f = sidekit.IdMap(), sidekit.IdMap()
        idmap_f.leftids = np.asarray(list(map(lambda x: '3' + str(x), modelF[:, 1])))
        idmap_m.leftids = np.asarray(list(map(lambda x: '3' + str(x), modelM[:, 1])))
        if index[0] == dir:
            idmap_f.rightids = np.asarray(list(map(lambda x: 'SW' + x[0][2:-3] + 'SPHT' + x[1], modelF[:, [0, 2]])))
            idmap_m.rightids = np.asarray(list(map(lambda x: 'SW' + x[0][2:-3] + 'SPHT' + x[1], modelM[:, [0, 2]])))
        elif index[1] == dir:
            idmap_f.rightids = np.asarray(list(map(lambda x: 'SW' + x[0][2:] + '.SPHT' + x[1], modelF[:, [0, 2]])))
            idmap_m.rightids = np.asarray(list(map(lambda x: 'SW' + x[0][2:] + '.SPHT' + x[1], modelM[:, [0, 2]])))
        else:
            idmap_f.rightids = np.asarray(
                list(map(lambda x: 'SW_' + str(int(x[0])) + '.SPHT' + x[1], modelF[:, [0, 2]])))
            idmap_m.rightids = np.asarray(
                list(map(lambda x: 'SW_' + str(int(x[0])) + '.SPHT' + x[1], modelM[:, [0, 2]])))

        idmap_m.start, idmap_f.start = np.empty(np.size(idmap_m.leftids), '|O'), np.empty(np.size(idmap_f.leftids),
                                                                                          '|O')
        idmap_m.stop, idmap_f.stop = np.empty(np.size(idmap_m.leftids), '|O'), np.empty(np.size(idmap_f.leftids), '|O')
        return idmap_m, idmap_f

    @staticmethod
    def removeDuplicate(li, ri, sta, sto):
        data = pd.DataFrame({'0': li, '1': ri, '2': sta, '3': sto}).drop_duplicates('1')
        idmap = sidekit.IdMap()
        idmap.leftids, idmap.rightids, idmap.start, idmap.stop = np.array(data['0']), np.array(data['1']), np.array(
            data['2']), np.array(data['3'])
        # duplicateId = pd.DataFrame(ri).duplicated()
        # duplicateId = [i for i, j in enumerate(duplicateId) if not j]  # True represent duplication
        # idmap = sidekit.IdMap()
        # idmap.leftids, idmap.rightids, idmap.start, idmap.stop = li[duplicateId], ri[duplicateId], sta[duplicateId], \
        #                                                          sto[duplicateId]
        return idmap

    @staticmethod
    def getAttr(li, ri, sta, sto, idmap):
        try:
            if str(idmap.leftids.squeeze()[
                       0]).__len__() > 10:  # 10 year ,it is test data ,leftid has model id ,so that cannot transform int
                return np.concatenate([li, idmap.leftids.squeeze()]), np.concatenate(
                    [ri, idmap.rightids.squeeze()]), np.concatenate(
                    [sta, idmap.start]), np.concatenate([sto, idmap.stop])
            else:
                return np.concatenate([li, idmap.leftids.squeeze().astype(int)]), np.concatenate(
                    [ri, idmap.rightids.squeeze()]), np.concatenate(
                    [sta, idmap.start]), np.concatenate([sto, idmap.stop])
        except:
            pass

    @staticmethod
    def idmap_trn(y):
        if y == 4:
            model2spkDir = root + "sre04/other/model_speaker-map-v2.txt"
            model2spkValue = pd.read_csv(model2spkDir, delimiter=',|\s*',
                                         header=None, engine='python').as_matrix()[:, :2]
            model2spkValue = [i for i in model2spkValue if re.match('\d{4}', i[1])]  # remove dirty data
            model2spkValue = np.array(model2spkValue).astype(int)  # modelId spkId
            for gender in ['male', 'female']:
                li, ri, sta, sto = [], [], [], []
                for i in ['1', '3', '8', '16']:
                    file = 'sre0' + str(y) + '/train_key/' + gender + '/' + i + 'side' + (
                        's' if i != '1' else '') + '.trn'
                    tmp = IdMapConstructor.idmapConstructor04_trn(file, copy.deepcopy(model2spkValue))
                    li, ri, sta, sto = IdMapConstructor.getAttr(li, ri, sta, sto, tmp)
                yield IdMapConstructor.removeDuplicate(li, ri, sta, sto)
        elif y == 5:
            model2spkDir = root + "sre05/other/sre05-trial_key-v7b.txt"
            model2spkValue = pd.read_csv(model2spkDir, delimiter=',|\s*',
                                         header=None, engine='python')
            model2spkValue = model2spkValue[model2spkValue[5] != 'xxxx'].drop_duplicates(0).as_matrix()[:, [0, 5]]

            model2spkValue = [[i[0][1:], i[1]] for i in model2spkValue if re.match('\d{4}', i[1])]  # remove dirty data
            model2spkValue = np.array(model2spkValue).astype(int)  # modelId spkId
            for gender in ['male', 'female']:
                li, ri, sta, sto = [], [], [], []
                for i in ['1', '3', '8']:
                    file = 'sre0' + str(y) + '/train_key/' + gender + '/' + i + 'conv4w.trn'
                    tmp = IdMapConstructor.idmapConstructor05_trn(file, copy.deepcopy(model2spkValue))
                    li, ri, sta, sto = IdMapConstructor.getAttr(li, ri, sta, sto, tmp)
                yield IdMapConstructor.removeDuplicate(li, ri, sta, sto)
        elif y == 6:
            model2spkDir = root + "sre06/other/sre06_model_key_v9a.txt"
            model2spkValue = pd.read_csv(model2spkDir, delimiter=',|\s*',
                                         header=None, engine='python')  # .as_matrix()[:, :2]
            for gender in ['m', 'f']:
                li, ri, sta, sto = [], [], [], []
                for i in ['1', '3', '8']:
                    tmp = IdMapConstructor.idmapConstructor06_trn(i + gender, copy.deepcopy(model2spkValue))
                    li, ri, sta, sto = IdMapConstructor.getAttr(li, ri, sta, sto, tmp)
                yield IdMapConstructor.removeDuplicate(li, ri, sta, sto)
        elif y == 8:
            li_m, ri_m, sta_m, sto_m, li_f, ri_f, sta_f, sto_f = [], [], [], [], [], [], [], []
            for i in ['3conv', '8conv', 'short2', 'long']:
                tmp_m, tmp_f = IdMapConstructor.idmapConstructor08_trn(i)
                li_m, ri_m, sta_m, sto_m = IdMapConstructor.getAttr(li_m, ri_m, sta_m, sto_m, tmp_m)
                li_f, ri_f, sta_f, sto_f = IdMapConstructor.getAttr(li_f, ri_f, sta_f, sto_f, tmp_f)
            yield IdMapConstructor.removeDuplicate(li_m, ri_m, sta_m, sto_m)
            yield IdMapConstructor.removeDuplicate(li_f, ri_f, sta_f, sto_f)
        elif y == 10:
            model2spkDir = root + "sre10/other/segmentkey.csv"
            model2spkValue = pd.read_csv(model2spkDir, delimiter=',|\s*', engine='python').as_matrix(
                ['segmentname', 'duration'])
            li_m, ri_m, sta_m, sto_m, li_f, ri_f, sta_f, sto_f = [], [], [], [], [], [], [], []
            for i in ['8conv', '10sec', 'core']:
                tmp_m, tmp_f = IdMapConstructor.idmapConstructor10_trn(i, copy.deepcopy(model2spkValue))
                li_m, ri_m, sta_m, sto_m = IdMapConstructor.getAttr(li_m, ri_m, sta_m, sto_m, tmp_m)
                li_f, ri_f, sta_f, sto_f = IdMapConstructor.getAttr(li_f, ri_f, sta_f, sto_f, tmp_f)
            yield IdMapConstructor.removeDuplicate(li_m, ri_m, sta_m, sto_m)
            yield IdMapConstructor.removeDuplicate(li_f, ri_f, sta_f, sto_f)
        elif y == 'cellular':
            li_m, ri_m, sta_m, sto_m, li_f, ri_f, sta_f, sto_f = [], [], [], [], [], [], [], []
            for i in ['2001S13', '2004S07']:
                tmp_m, tmp_f = IdMapConstructor.idmapConstructor_swb_cellular(i)
                li_m, ri_m, sta_m, sto_m = IdMapConstructor.getAttr(li_m, ri_m, sta_m, sto_m, tmp_m)
                li_f, ri_f, sta_f, sto_f = IdMapConstructor.getAttr(li_f, ri_f, sta_f, sto_f, tmp_f)
            yield IdMapConstructor.removeDuplicate(li_m, ri_m, sta_m, sto_m)
            yield IdMapConstructor.removeDuplicate(li_f, ri_f, sta_f, sto_f)
        elif y == 'phase':
            li_m, ri_m, sta_m, sto_m, li_f, ri_f, sta_f, sto_f = [], [], [], [], [], [], [], []
            for i in ['98S75', '99S79', '2002S06']:
                tmp_m, tmp_f = IdMapConstructor.idmapConstructor_swb_phase(i)
                li_m, ri_m, sta_m, sto_m = IdMapConstructor.getAttr(li_m, ri_m, sta_m, sto_m, tmp_m)
                li_f, ri_f, sta_f, sto_f = IdMapConstructor.getAttr(li_f, ri_f, sta_f, sto_f, tmp_f)
            yield IdMapConstructor.removeDuplicate(li_m, ri_m, sta_m, sto_m)
            yield IdMapConstructor.removeDuplicate(li_f, ri_f, sta_f, sto_f)

    @staticmethod
    def idmap_tst(y):
        if y == 4:
            model2spkDir = root + "sre04/other/sre04_key-v2.txt"
            model2spkValue = pd.read_csv(model2spkDir, delimiter=',|\s*',
                                         header=None, engine='python').as_matrix()[:, [0, 5, 6]]
            model2spkValue = [i for i in model2spkValue if re.match('\d{4}', i[1])]
            model2spkValue = np.array(model2spkValue)
            li_m, ri_m, sta_m, sto_m, li_f, ri_f, sta_f, sto_f = [], [], [], [], [], [], [], []
            for i in ['1', '3', '8', '16']:
                tmp_m, tmp_f = IdMapConstructor.idmapConstructor04_tst(
                    'sre04/test_key/' + i + 'side' + ('s' if i != '1' else '') + '-1side.ndx',
                    copy.deepcopy(model2spkValue))
                li_m, ri_m, sta_m, sto_m = IdMapConstructor.getAttr(li_m, ri_m, sta_m, sto_m, tmp_m)
                li_f, ri_f, sta_f, sto_f = IdMapConstructor.getAttr(li_f, ri_f, sta_f, sto_f, tmp_f)
            yield IdMapConstructor.removeDuplicate(li_m, ri_m, sta_m, sto_m)
            yield IdMapConstructor.removeDuplicate(li_f, ri_f, sta_f, sto_f)
        elif y == 5:
            model2spkDir = root + "sre05/other/sre05-trial_key-v7b.txt"
            model2spkValue = pd.read_csv(model2spkDir, delimiter=',|\s*',
                                         header=None, engine='python')
            model2spkValue = model2spkValue[model2spkValue[5] != 'xxxx'].drop_duplicates([1, 4]).as_matrix()[:,
                             [1, 4, 5, 8]]
            li_m, ri_m, sta_m, sto_m, li_f, ri_f, sta_f, sto_f = [], [], [], [], [], [], [], []
            for j in ['4w', 'mic']:
                for i in ['1', '3', '8']:
                    tmp_m, tmp_f = IdMapConstructor.idmapConstructor05_tst(
                        'sre05/test_key/' + i + 'conv4w-1conv' + j + '.ndx', copy.deepcopy(model2spkValue))
                    li_m, ri_m, sta_m, sto_m = IdMapConstructor.getAttr(li_m, ri_m, sta_m, sto_m, tmp_m)
                    li_f, ri_f, sta_f, sto_f = IdMapConstructor.getAttr(li_f, ri_f, sta_f, sto_f, tmp_f)
            yield IdMapConstructor.removeDuplicate(li_m, ri_m, sta_m, sto_m)
            yield IdMapConstructor.removeDuplicate(li_f, ri_f, sta_f, sto_f)
        elif y == 6:
            model2spkDir = root + "sre06/other/sre06_test_seg_key_v11a.txt"
            model2spkValue = pd.read_csv(model2spkDir, delimiter='\s*',
                                         header=None, engine='python')  # .as_matrix()[:, :2]
            model2spkValue = model2spkValue.drop_duplicates([0, 6])
            tmp = []
            for j, i in enumerate(model2spkValue[4]):
                if re.match("^\d{4,}$", i):
                    tmp.append(True)
                else:
                    tmp.append(False)
            model2spkValue = model2spkValue[tmp]
            for gender in ['m', 'f']:
                li, ri, sta, sto = [], [], [], []
                tmp = IdMapConstructor.idmapConstructor06_tst('1' + gender, copy.deepcopy(model2spkValue))
                li, ri, sta, sto = IdMapConstructor.getAttr(li, ri, sta, sto, tmp)
                yield IdMapConstructor.removeDuplicate(li, ri, sta, sto)
        elif y == 8:
            index = ['segment_id', 'speaker_id', 'channel_type']
            model2spkDir = root + "sre08/other/NIST_SRE08_long.test.segment.trial_key"
            L = pd.read_csv(model2spkDir, delimiter=':|,', engine='python')[index].as_matrix()
            model2spkDir = root + "sre08/other/NIST_SRE08_short3.test.segment.trial_key"
            S = pd.read_csv(model2spkDir, delimiter=':|,', engine='python')[index].as_matrix()
            ind = ['3conv-short3', '8conv-short3', 'long-short3', 'short2-short3', 'long-long']
            ind1 = ['model_id', 'test_id', 'channel', 'trial_status']
            tmp = pd.DataFrame(columns=ind1)
            for i in ind:
                value = pd.read_csv(root + "sre08/test_key/NIST_SRE08_" + i + ".trial.trial_key", delimiter=',',
                                    engine='python')[ind1]
                tmp = pd.concat([tmp, value[value['trial_status'] == 'target'].drop_duplicates('test_id')])
            tmp = tmp[ind1[:3]].drop_duplicates()
            ind2 = ['model_id', 'sex']
            tmp1 = pd.DataFrame(columns=ind2)
            for i in ['3conv', '8conv', 'short2', 'long']:
                value = pd.read_csv(root + "sre08/train_key/NIST_SRE08_" + i + ".model.trial_key", delimiter=',|\s*',
                                    engine='python')[ind2].drop_duplicates()
                tmp1 = pd.concat([tmp1, value])
            tmp1 = tmp1.drop_duplicates()
            tmp2 = pd.merge(tmp, tmp1, how='inner', on='model_id', copy=False)
            tmp2 = tmp2[['test_id', 'channel', 'sex']].drop_duplicates()
            li_m, ri_m, sta_m, sto_m, li_f, ri_f, sta_f, sto_f = [], [], [], [], [], [], [], []
            for i in ind:
                if i != 'long-long':
                    tmp_m, tmp_f = IdMapConstructor.idmapConstructor08_tst(i, copy.deepcopy(S), copy.deepcopy(tmp2))
                else:
                    tmp_m, tmp_f = IdMapConstructor.idmapConstructor08_tst(i, copy.deepcopy(L), copy.deepcopy(tmp2))
                li_m, ri_m, sta_m, sto_m = IdMapConstructor.getAttr(li_m, ri_m, sta_m, sto_m, tmp_m)
                li_f, ri_f, sta_f, sto_f = IdMapConstructor.getAttr(li_f, ri_f, sta_f, sto_f, tmp_f)
            yield IdMapConstructor.removeDuplicate(li_m, ri_m, sta_m, sto_m)
            yield IdMapConstructor.removeDuplicate(li_f, ri_f, sta_f, sto_f)
        elif y == 10:
            model2spkDir = root + "sre10/other/segmentkey.csv"
            duration = pd.read_csv(model2spkDir, delimiter=',|\s*', engine='python').as_matrix(
                ['segmentname', 'duration'])
            #
            # index = ['modelid', 'testid', 'channel']
            # tmp = pd.DataFrame(columns=index)
            # fileName = ['coreext-coreext', 'core-core', 'core-10sec', '8conv-coreext', '8conv-core', '8conv-10sec',
            #             '10sec-10sec']
            # for i in fileName:
            #     tD = root + "sre10/test_key/" + i + ".trialkey.csv"
            #     t = pd.read_csv(tD, delimiter=',', engine='python')
            #     t = t[t['targettype'] == 'target'][index]
            #     tmp = pd.merge(tmp, t, how='outer', copy=False)
            # trialkey = tmp.drop_duplicates()
            # pk.dump(trialkey,open('./trialkey', 'wb'))
            #
            index = ['1', '2', '3', '4', '5']
            # tmp = pd.DataFrame(columns=index)
            # fileName = ['8conv-core', '8conv-10sec', 'core-core', 'core-10sec', '10sec-10sec']
            # for i in fileName:
            #     tD = root + "sre10/test_key/" + i + ".ndx"
            #     t = pd.read_csv(tD, delimiter=':|\s+|/|\.', engine='python', header=None)
            #     t = t.drop_duplicates([4, 6])[[1, 2, 3, 4, 6]]
            #     t.columns = index
            #     tmp = pd.merge(tmp, t, how='outer', copy=False)
            # ndx = tmp.drop_duplicates()
            # pk.dump(ndx,open("./ndx",'wb'))

            trialkey = pk.load(open('./trialkey', 'rb'))
            ndx = pk.load(open('./ndx', 'rb'))

            trialkey.loc[trialkey['channel'] == 'a', 'channel'] = 'A'
            trialkey.loc[trialkey['channel'] == 'b', 'channel'] = 'B'
            tmp = pd.merge(ndx, trialkey, how='inner', left_on=['4', '5'], right_on=['testid', 'channel'], copy=False)
            tmp = tmp[index + ['modelid']]

            li_m, ri_m, sta_m, sto_m, li_f, ri_f, sta_f, sto_f = [], [], [], [], [], [], [], []
            tmp_m, tmp_f = IdMapConstructor.idmapConstructor10_tst(copy.deepcopy(tmp), copy.deepcopy(duration))
            li_m, ri_m, sta_m, sto_m = IdMapConstructor.getAttr(li_m, ri_m, sta_m, sto_m, tmp_m)
            li_f, ri_f, sta_f, sto_f = IdMapConstructor.getAttr(li_f, ri_f, sta_f, sto_f, tmp_f)
            yield IdMapConstructor.removeDuplicate(li_m, ri_m, sta_m, sto_m)
            yield IdMapConstructor.removeDuplicate(li_f, ri_f, sta_f, sto_f)

    @staticmethod
    def readSreIdmap(y, is10=False):
        if isinstance(y, int):
            y = str(y)
            if y == '10' and is10:
                idmap = sidekit.IdMap(idmapDir + y + "male.h5")
                idmap1 = sidekit.IdMap(idmapDir + y + "female.h5")
                return idmap, idmap1
            else:
                idmap = sidekit.IdMap(idmapDir + y + "trainmale.h5")
                idmap1 = sidekit.IdMap(idmapDir + y + "trainfemale.h5")
                idmap2 = sidekit.IdMap(idmapDir + y + "testmale.h5")
                idmap3 = sidekit.IdMap(idmapDir + y + "testfemale.h5")
                return idmap, idmap1, idmap2, idmap3
        else:
            idmap = sidekit.IdMap(idmapDir + y + "male.h5")
            idmap1 = sidekit.IdMap(idmapDir + y + "female.h5")
            return idmap, idmap1

    @staticmethod
    def readAllSreIdmap():
        year = [4, 5, 6, 8, 'cellular', 'phase']  # 10 ,4,5,6,8,'cellular','phase'
        t = {}
        tmp = IdMapConstructor.readSreIdmap(10, True)
        t[str(10)] = tmp
        for i in year:
            tmp = IdMapConstructor.readSreIdmap(i)
            t[str(i)] = tmp
        return t

    @staticmethod
    @ut.timing("write")
    def writeSreIdmap(y):
        if isinstance(y, int):
            for tmp_m_trn, tmp_m_tst, gender in zip(IdMapConstructor.idmap_trn(y), IdMapConstructor.idmap_tst(y),
                                                    ['male', 'female']):  # male,female
                li, ri, sta, sto = [], [], [], []
                li, ri, sta, sto = IdMapConstructor.getAttr(li, ri, sta, sto, tmp_m_trn)
                idmap = IdMapConstructor.removeDuplicate(li, ri, sta, sto)
                assert idmap.validate()
                idmap.write(idmapDir + str(y) + "train" + gender + ".h5")
                li, ri, sta, sto = [], [], [], []
                li, ri, sta, sto = IdMapConstructor.getAttr(li, ri, sta, sto, tmp_m_tst)
                idmap = IdMapConstructor.removeDuplicate(li, ri, sta, sto)
                assert idmap.validate()
                idmap.write(idmapDir + str(y) + "test" + gender + ".h5")
            if y == 10:
                tmp = IdMapConstructor.readSreIdmap(10)
                li, ri, sta, sto = [], [], [], []
                li, ri, sta, sto = IdMapConstructor.getAttr(li, ri, sta, sto, tmp[0])
                li, ri, sta, sto = IdMapConstructor.getAttr(li, ri, sta, sto, tmp[2])
                idmap = IdMapConstructor.removeDuplicate(li, ri, sta, sto)
                assert idmap.validate()
                idmap.write(idmapDir + str(y) + "male.h5")
                li, ri, sta, sto = [], [], [], []
                li, ri, sta, sto = IdMapConstructor.getAttr(li, ri, sta, sto, tmp[1])
                li, ri, sta, sto = IdMapConstructor.getAttr(li, ri, sta, sto, tmp[3])
                idmap = IdMapConstructor.removeDuplicate(li, ri, sta, sto)
                assert idmap.validate()
                idmap.write(idmapDir + str(y) + "female.h5")
                # integrate train and test###############################################
                # li, ri, sta, sto = [], [], [], []
                # li, ri, sta, sto = IdMapConstructor.getAttr(li, ri, sta, sto,tmp_m_trn)
                # li, ri, sta, sto = IdMapConstructor.getAttr(li, ri, sta, sto,tmp_m_tst)
                # idmap=IdMapConstructor.removeDuplicate(li, ri, sta, sto)
                # assert idmap.validate()
                # idmap.write(root+"fea/idmap/04"+gender+".h5")
                ########################################################################
            print("year:" + str(y) + "complete!!!")
        else:  # SWBdata
            for tmp_m_trn, gender in zip(IdMapConstructor.idmap_trn(y), ['male', 'female']):  # male,female
                li, ri, sta, sto = [], [], [], []
                li, ri, sta, sto = IdMapConstructor.getAttr(li, ri, sta, sto, tmp_m_trn)
                idmap = IdMapConstructor.removeDuplicate(li, ri, sta, sto)
                assert idmap.validate()
                idmap.write(idmapDir + str(y) + gender + ".h5")
            print("year:" + str(y) + "complete!!!")

    @staticmethod
    def getDataStat():
        year = [10, 4, 5, 6, 8, 'cellular', 'phase']  # 10 ,4,5,6,8,'cellular','phase'
        t = []
        for i in year:
            tmp = IdMapConstructor.readSreIdmap(i, True)
            t.append(tmp)
        print(
            '=======male file;male person;female file;female person==========================================================')
        for i in range(7):
            if i in [1, 2, 3, 4]:
                print('---------------------------------------------------------')
                s = pd.concat([pd.DataFrame(t[i][0].leftids), (pd.DataFrame(t[i][2].leftids))])
                print(s.shape)  # male files
                print(s.drop_duplicates().shape)  # male persons
                s = pd.concat([pd.DataFrame(t[i][1].leftids), (pd.DataFrame(t[i][3].leftids))])
                print(s.shape)  # female files
                print(s.drop_duplicates().shape)  # female persons
            else:
                print('---------------------------------------------------------')
                s = pd.DataFrame(t[i][0].leftids)
                print(s.shape)  # male files
                print(s.drop_duplicates().shape)  # male persons
                s = pd.DataFrame(t[i][1].leftids)
                print(s.shape)  # female files
                print(s.drop_duplicates().shape)  # female persons

    @staticmethod
    def idMap2DataFrame(idmap: sidekit.IdMap, onlyModelId: bool = False) -> pd.DataFrame:
        #onlyModelId is mean that if only get model id from year 10,so it should be false when yesr is not 10
        if onlyModelId:
            idmap.leftids = np.asarray([i[-5:] for i in idmap.leftids])
        return pd.DataFrame(np.asarray([idmap.leftids, idmap.rightids, idmap.start, idmap.stop]).T,
                            columns=['id', 'fi', 'sta', 'sto'])


@ut.timing("TotalTime")
def main():
    IdMapConstructor.tesTableConstructor10s()
    # IdMapConstructor.tesTableConstructor10s()
    # s=sidekit.Key(root + "fea/trialkey.h5")
    # t = IdMapConstructor.key2ndx_SelectSomeTrialToDo(10, True)
    # IdMapConstructor.keyConstructorCustom()
    # IdMapConstructor.getDataStat()
    # t=IdMapConstructor.readSreIdmap('phase')
    # pass
    # IdMapConstructor.writeSreIdmap(10)
    # tmp = IdMapConstructor.readAllSreIdmap()
    pass
    # pass
    # t=[]
    # year = [10 ,4,5,6,8,'cellular','phase']  # 10 ,4,5,6,8,'cellular','phase'
    # for i in year:
    #     t.append(IdMapConstructor.readSreIdmap(i))
    # pass
    # IdMapConstructor.getDataStat()
    # t=IdMapConstructor.readSreIdmap(10)
    # pass
    # for i in IdMapConstructor.idmap_tst(year):
    #     t.append(i)
    # pass
    # t=[]
    # for i in year:
    #     t.append(IdMapConstructor.readSreIdmap(i))
    # pass


if __name__ == '__main__':
    main()
